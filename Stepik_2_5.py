"""
Реализуйте программу, которая будет эмулировать работу с пространствами имен. Необходимо реализовать поддержку
создания пространств имен и добавление в них переменных.
В данной задаче у каждого пространства имен есть уникальный текстовый идентификатор – его имя.
Вашей программе на вход подаются следующие запросы:
create <namespace> <parent> –  создать новое пространство имен с именем <namespace> внутри пространства <parent> add
<namespace> <var> – добавить в пространство <namespace> переменную <var> get <namespace> <var> – получить имя
пространства, из которого будет взята переменная <var> при запросе из пространства <namespace>, или None, если такого
пространства не существует. Рассмотрим набор запросов
add global a create foo global add foo b create bar foo add bar a Структура пространств имен описанная данными
запросами будет эквивалентна структуре пространств имен, созданной при выполнении данного кода
a = 0 def foo(): b = 1 def bar(): a = 2 В основном теле программы мы объявляем переменную a, тем самым добавляя ее в
пространство global. Далее мы объявляем функцию foo, что влечет за собой создание локального для нее пространства
имен внутри пространства global. В нашем случае, это описывается командой create foo global. Далее мы объявляем
внутри функции foo функцию bar, тем самым создавая пространство bar внутри пространства foo, и добавляем в bar
переменную a.
Для каждого запроса get выведите в отдельной строке его результат.
"""

scopes = dict({'global': [None]})  # Хранение данных


def create(namespace, parent):
    scopes.update({namespace: [parent]})


def add(namespace, var):
    scopes[namespace].append(var)


def get(namespace, var):
    while namespace is not None and var not in scopes[namespace][1:]:
        namespace = scopes[namespace][0]
    print(namespace)


operations = {'create': create, 'add': add, 'get': get}  # Вызов функции по inp[0]
for i in range(int(input())):  # Ввод количества команд
    inp = input().split()      # Ввод команд
    operations[inp[0]](inp[1], inp[2])  # Разделение команд
